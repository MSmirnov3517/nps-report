import imaplib
import email
import os
from datetime import datetime
import pandas as pd
import re
from telegram import Bot
import asyncio
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
EMAIL = "MsL-2025@mail.ru"
IMAP_SERVER = "imap.mail.ru"
PASSWORD = os.getenv("EMAIL_PASSWORD")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –°–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏
EMOJIS = ["‚ú®", "üåü", "üöÄ", "üí°", "üéâ", "üî•", "üåà", "‚ö°", "üçÄ", "üåº"]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–æ—á—Ç–µ
def connect_to_email():
    mail = imaplib.IMAP4_SSL(IMAP_SERVER)
    mail.login(EMAIL, PASSWORD)
    mail.select("INBOX")
    return mail

# –ü–æ–∏—Å–∫ –ø–∏—Å—å–º–∞ —Å NPS –∑–∞ —Å–µ–≥–æ–¥–Ω—è
def fetch_email(mail):
    today = datetime.now().strftime("%d-%b-%Y")
    _, message_numbers = mail.search(None, f'(SINCE "{today}" SUBJECT "NPS")')
    for num in message_numbers[0].split():
        _, msg_data = mail.fetch(num, "(RFC822)")
        email_body = msg_data[0][1]
        email_msg = email.message_from_bytes(email_body)
        for part in email_msg.walk():
            if part.get_content_maintype() == "multipart":
                continue
            if part.get("Content-Disposition") is None:
                continue
            filename = part.get_filename()
            if "NPS" in filename and filename.endswith(".xlsx"):
                filepath = os.path.join("temp", filename)
                os.makedirs("temp", exist_ok=True)
                with open(filepath, "wb") as f:
                    f.write(part.get_payload(decode=True))
                return filepath, filename
    return None, None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Excel –∏ —Ä–∞—Å—á–µ—Ç NPS
def process_excel(filepath, filename):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞—Ç—ã –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "NPS 02.06.2025.xlsx")
    date_str = re.search(r"\d{2}\.\d{2}\.\d{4}", filename).group()
    report_date = datetime.strptime(date_str, "%d.%m.%Y").strftime("%Y-%m-%d")  # –î–∞—Ç–∞ "–≤—á–µ—Ä–∞"
    month_start = datetime.strptime(date_str, "%d.%m.%Y").replace(day=1).strftime("%Y-%m-%d")  # –ù–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞

    df = pd.read_excel(filepath)
    # –§–∏–ª—å—Ç—Ä –∑–∞ –≤—á–µ—Ä–∞ –∏ —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"])
    df_yesterday = df[df["–î–∞—Ç–∞"] == report_date]
    df_month = df[df["–î–∞—Ç–∞"] >= month_start]

    # –ü–æ–¥—Å—á–µ—Ç –æ—Ü–µ–Ω–æ–∫
    ratings_yesterday = df_yesterday["–û—Ü–µ–Ω–∫–∞"].value_counts().to_dict()
    ratings_month = df_month["–û—Ü–µ–Ω–∫–∞"].value_counts().to_dict()

    # NPS: (5 - (3+2+1)) / (5+4+3+2+1) * 100
    def calculate_nps(ratings):
        r5 = ratings.get(5, 0)
        r4 = ratings.get(4, 0)
        r3 = ratings.get(3, 0)
        r2 = ratings.get(2, 0)
        r1 = ratings.get(1, 0)
        total = r5 + r4 + r3 + r2 + r1
        if total == 0:
            return 0
        return round(((r5 - (r3 + r2 + r1)) / total) * 100)

    nps_yesterday = calculate_nps(ratings_yesterday)
    nps_month = calculate_nps(ratings_month)

    # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ (–≤—Å–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ —Å –æ—Ü–µ–Ω–∫–æ–π 5 –∑–∞ –¥–µ–Ω—å)
    thanks = df_yesterday[df_yesterday["–û—Ü–µ–Ω–∫–∞"] == 5]["–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"].dropna()
    thanks_text = "\n".join(thanks) if not thanks.empty else ""

    # –ñ–∞–ª–æ–±—ã (–æ—Ü–µ–Ω–∫–∏ 1, 2, 3)
    complaints = df_yesterday[df_yesterday["–û—Ü–µ–Ω–∫–∞"].isin([1, 2, 3])]
    complaints_text = ""
    for _, row in complaints.iterrows():
        complaints_text += f"{row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}  {row['–û—Ü–µ–Ω–∫–∞']}  {row['Id –∂–∞–ª–æ–±—ã']}  {row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}\n"

    return {
        "nps_month": nps_month,
        "nps_yesterday": nps_yesterday,
        "count_5": ratings_yesterday.get(5, 0),
        "thanks": thanks_text,
        "complaints": complaints_text or "–ù–µ—Ç –∂–∞–ª–æ–±"
    }

# –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –≤ Telegram
async def send_report(data=None):
    bot = Bot(token=TELEGRAM_TOKEN)
    if data:
        report = (
            f"NPS —Å –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ - {data['nps_month']}% {random.choice(EMOJIS)}\n"
            f"\n"  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            f"NPS –∑–∞ –≤—á–µ—Ä–∞ - {data['nps_yesterday']}% {random.choice(EMOJIS)}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 5 - {data['count_5']} {random.choice(EMOJIS)}\n"
        )
        if data["thanks"]:
            report += f"–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏ –≥–æ—Å—Ç–µ–π - {data['thanks']} üëç {random.choice(EMOJIS)}\n"
        report += f"–ñ–∞–ª–æ–±—ã\n{data['complaints']} {random.choice(EMOJIS)}"
    else:
        report = f"–û—Ç—á–µ—Ç –∑–∞ –≤—á–µ—Ä–∞ –Ω–µ –ø—Ä–∏—à–µ–ª –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ üì≠"
    await bot.send_message(chat_id=CHAT_ID, text=report)

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
async def main():
    mail = connect_to_email()
    filepath, filename = fetch_email(mail)
    if filepath and filename:
        data = process_excel(filepath, filename)
        await send_report(data)
        os.remove(filepath)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    else:
        await send_report()  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç—á–µ—Ç–∞
    mail.logout()

if __name__ == "__main__":
    asyncio.run(main())
